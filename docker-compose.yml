version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: manga_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-manga_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-manga_password}
      POSTGRES_DB: ${POSTGRES_DB:-manga_reader}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - manga-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U manga_user -d manga_reader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Бекенд на Go
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      no_cache: true
    container_name: manga_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-manga_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-manga_password}
      - POSTGRES_DB=${POSTGRES_DB:-manga_reader}
      - SERVER_PORT=8080
      - JWT_SECRET=${JWT_SECRET:-your_super_secret_key_change_in_production}
      - GOPROXY=direct
      - GO111MODULE=on
    volumes:
      - ./backend/data:/app/data
    ports:
      - "8080:8080"
    networks:
      - manga-network

  # Фронтенд на React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: manga_frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - manga-network

networks:
  manga-network:
    driver: bridge

volumes:
  postgres_data: